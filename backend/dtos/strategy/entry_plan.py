# backend/dtos/strategy/entry_plan.py
"""
EntryPlan DTO - Defines how to enter a trade position.

Specifies concrete entry execution instructions created by Entry Planning workers.
Defines HOW to enter (timing, price, order type) without specifying HOW MUCH
(position sizing is the responsibility of SizePlan).

@layer: DTOs (Strategy Planning Output)
@dependencies: [pydantic, backend.utils.id_generators]
"""

# Standard Library Imports
from datetime import datetime, timezone
from decimal import Decimal
from typing import Any, Literal

# Third-Party Imports
from pydantic import BaseModel, Field

# Our Application Imports
from backend.utils.id_generators import generate_entry_plan_id


class EntryPlan(BaseModel):
    """
    Entry plan specifying how to enter a trade position.

    Generated by Entry Planning workers as output of the planning phase.
    Contains execution strategy, timing, and price guidance for entering
    a position, but NOT the position size (that's SizePlan's role).

    **Planning Chain Position:** First step (Entry → Size → Exit → Routing)

    **Key Responsibilities:**
    - Order type selection (MARKET, LIMIT, STOP_LIMIT, etc.)
    - Timing strategy (IMMEDIATE, LAYERED, PATIENT, TWAP)
    - Price guidance (reference, limit, stop prices)
    - Slippage tolerance and validity constraints

    **Not Responsible For:**
    - Position sizing (see SizePlan)
    - Exit strategy (see ExitPlan)
    - Order routing (see RoutingPlan)

    **Usage Example:**
    ```python
    # Immediate market entry for high-urgency signal
    plan = EntryPlan(
        planner_id="immediate_market_entry",
        symbol="BTCUSDT",
        direction="BUY",
        order_type="MARKET",
        timing="IMMEDIATE",
        reference_price=Decimal("95500.00"),
        max_slippage_pct=Decimal("0.001"),
        rationale="High urgency breakout signal - execute immediately"
    )
    ```

    **Attributes:**
        plan_id: Auto-generated unique identifier (ENT_ prefix)
        created_at: Auto-set creation timestamp (timezone-aware UTC)
        planner_id: ID of the Entry Planner that created this plan
        symbol: Trading pair (e.g., 'BTCUSDT')
        direction: Trade direction (BUY or SELL)
        order_type: Order execution type (MARKET, LIMIT, STOP_LIMIT, etc.)
        timing: Execution timing strategy (IMMEDIATE, LAYERED, PATIENT, TWAP)
        reference_price: Reference price for entry (optional for MARKET orders)
        limit_price: Limit price for LIMIT orders (optional)
        stop_price: Stop trigger price for STOP_LIMIT orders (optional)
        max_slippage_pct: Maximum acceptable slippage 0.0-1.0 (optional)
        valid_until: Plan expiration timestamp (optional)
        planner_metadata: Additional context from planner (optional)
        rationale: Human-readable explanation of entry strategy (required)
    """

    # Identiteit
    plan_id: str = Field(
        default_factory=generate_entry_plan_id,
        description="Unique identifier for this entry plan"
    )
    created_at: datetime = Field(
        default_factory=lambda: datetime.now(timezone.utc),
        description="When this plan was created"
    )
    planner_id: str = Field(
        description="ID of the Entry Planner that created this plan"
    )

    # Trade basics
    symbol: str = Field(
        description="Trading pair symbol (e.g., 'BTCUSDT')"
    )
    direction: Literal["BUY", "SELL"] = Field(
        description="Trade direction"
    )

    # Entry execution strategy
    order_type: str = Field(
        description="Order type: MARKET, LIMIT, STOP_LIMIT, etc."
    )
    timing: str = Field(
        description="Timing strategy: IMMEDIATE, LAYERED, PATIENT, TWAP"
    )

    # Price guidance
    reference_price: Decimal | None = Field(
        None,
        description="Reference price for entry (optional for MARKET orders)"
    )
    limit_price: Decimal | None = Field(
        None,
        description="Limit price for LIMIT orders"
    )
    stop_price: Decimal | None = Field(
        None,
        description="Stop price for STOP_LIMIT orders"
    )

    # Entry constraints
    max_slippage_pct: Decimal | None = Field(
        None,
        ge=Decimal("0.0"),
        le=Decimal("1.0"),
        description="Maximum acceptable slippage as percentage (0.0-1.0)"
    )

    # Time constraints
    valid_until: datetime | None = Field(
        None,
        description="Plan expiration time (optional)"
    )

    # Planner-specific metadata
    planner_metadata: dict[str, Any] = Field(
        default_factory=dict,
        description="Additional context from the planner"
    )

    # Rationale
    rationale: str = Field(
        description="Why this entry approach was chosen"
    )

    model_config = {
        "json_schema_extra": {
            "example": {
                "plan_id": "ENT_20250125_abc123",
                "created_at": "2025-01-25T10:30:00Z",
                "planner_id": "immediate_market_entry",
                "symbol": "BTCUSDT",
                "direction": "BUY",
                "order_type": "MARKET",
                "timing": "IMMEDIATE",
                "reference_price": "95500.00",
                "max_slippage_pct": "0.001",
                "rationale": "High urgency signal - execute immediately"
            }
        }
    }
